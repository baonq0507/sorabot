const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { ODD_OR_EVEN_COMMAND, THUMBNAIL, APP_NAME } = process.env;
const User = require('../models/user');
const { formatNumber, sleep } = require('../common');
module.exports = {
    data: new SlashCommandBuilder()
        .setName(ODD_OR_EVEN_COMMAND)
        .setDescription('Ch·∫µn l·∫ª'),
    async execute(message, args) {
        const oddorEven = args[0];
        const amount = parseInt(args[1]);
        const luckyNumber = parseInt(args[2]);

        if (isNaN(amount) || amount < 0) return message.reply('Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn l·ªõn h∆°n 0');
        if (luckyNumber !== undefined) {
            if (isNaN(luckyNumber) || luckyNumber < 0 || luckyNumber > 99) return message.reply('Vui l√≤ng nh·∫≠p s·ªë may m·∫Øn t·ª´ 0-99');
        }

        let user = await User.findOne({ discordId: message.author.id });
        if (!user) {
            user = await User.create({
                discordId: message.author.id,
                displayName: message.author.displayName,
            });
        }
        if (amount > user.balance) {
            await message.reply('S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n s·ªë ti·ªÅn hi·ªán t·∫°i! üíµ üíµ üíµ' + formatNumber(user.balance));
            return;
        }

        if (oddorEven !== 'ch·∫µn' && oddorEven !== 'l·∫ª') {
            await message.reply('Vui l√≤ng nh·∫≠p ch·∫µn ho·∫∑c l·∫ª');
            return;
        }

        if (amount > 100000000) {
            await message.reply('S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n 100.000.000');
            return;
        }

        const reply = await message.reply(`${APP_NAME} ƒëang x·ª≠ l√Ω... Vui l√≤ng ch·ªù ü§ó ü§ó ü§ó`);
        await sleep(3000);

        // T·∫°o ng·∫´u nhi√™n v·ªõi t·ªâ l·ªá th·∫Øng 40%
        const winChance = 0.4;
        const playerWins = Math.random() < winChance;

        let number;
        if (oddorEven === 'ch·∫µn') {
            if (playerWins) {
                // T·∫°o s·ªë ch·∫µn
                do {
                    number = Math.floor(Math.random() * 100);
                } while (number % 2 !== 0);
            } else {
                // T·∫°o s·ªë l·∫ª
                do {
                    number = Math.floor(Math.random() * 100);
                } while (number % 2 === 0);
            }
        } else { // oddorEven === 'l·∫ª'
            if (playerWins) {
                // T·∫°o s·ªë l·∫ª
                do {
                    number = Math.floor(Math.random() * 100);
                } while (number % 2 === 0);
            } else {
                // T·∫°o s·ªë ch·∫µn
                do {
                    number = Math.floor(Math.random() * 100);
                } while (number % 2 !== 0);
            }
        }

        const result = number % 2 === 0 ? 'ch·∫µn' : 'l·∫ª';
        let isWin = result === oddorEven;

        // Th√™m bonus n·∫øu ƒëo√°n ƒë√∫ng s·ªë
        let multiplier = 1;
        if (number === luckyNumber) {
            multiplier = 7;
        }

        const winAmount = isWin ? amount * multiplier : -amount;
        user.balance += winAmount;
        await user.save();

        const embed = new EmbedBuilder()
            .setColor(isWin ? 'Green' : 'Red')
            .setTitle(`K·∫øt qu·∫£: ${result}`)
            .setDescription(`B·∫°n ƒë√£ ${isWin ? 'th·∫Øng' : 'thua'} ${isWin ? '+' : '-'} ${formatNumber(Math.abs(winAmount))} üí∏ üí∏ üí∏`)
            .addFields(
                { name: 'S·ªë may m·∫Øn c·ªßa b·∫°n', value: luckyNumber.toString() },
                { name: 'S·ªë may m·∫Øn tr√∫ng th∆∞·ªüng', value: number.toString() },
                { name: 'Nh√¢n h·ªá s·ªë', value: multiplier.toString() },
                { name: 'T·ªïng ti·ªÅn tr√∫ng th∆∞·ªüng', value: formatNumber(winAmount) },
                { name: 'S·ªë ti·ªÅn sau c∆∞·ª£c', value: formatNumber(user.balance) },
            )
            .setTimestamp()
            .setThumbnail(THUMBNAIL);

        await reply.edit({ content: `${APP_NAME} ƒë√£ x·ª≠ l√Ω k·∫øt qu·∫£`, embeds: [embed] });
    },
    async autocomplete(interaction) {
        const choices = ['ch·∫µn', 'l·∫ª'];
        const filtered = choices.filter(choice => choice.startsWith(interaction.options.getFocused()));
        await interaction.respond(filtered.map(choice => ({ name: choice, value: choice })));
    }
}