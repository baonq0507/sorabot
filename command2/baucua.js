const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { BAUCUACOMMAND, TIME_BET } = process.env;
const { formatNumber } = require('../common');
const User = require('../models/user');
module.exports = {
    data: new SlashCommandBuilder()
        .setName(BAUCUACOMMAND)
        .setDescription('Ch∆°i game B·∫ßu Cua')
        .addIntegerOption(option =>
            option.setName('tiencuoc')
                .setDescription('S·ªë ti·ªÅn b·∫°n mu·ªën c∆∞·ª£c')
                .setRequired(true)
                .setMinValue(1000)
            ),
    async execute(interaction) {
        let user = await User.findOne({ discordId: interaction.user.id });
        if (!user) {
            user = await User.create({ discordId: interaction.user.id, displayName: interaction.user.username });
        }
        if (user.displayName === '') {
            user.displayName = interaction.user.username;
            await user.save();
        }

        const amount = interaction.options.getInteger('tiencuoc');
        if (amount > user.balance || amount <= 0) {
            await interaction.reply('S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 1000 v√† kh√¥ng ƒë∆∞·ª£c l·ªõn h∆°n s·ªë ti·ªÅn hi·ªán t·∫°i! üíµ üíµ üíµ');
            return;
        }

        const baucualist = [
            {
                name: 'T√¥m',
                emoji: 'ü¶ê'
            },
            {
                name: 'Cua', 
                emoji: 'ü¶Ä'
            },
            {
                name: 'C√°',
                emoji: 'üêü'
            },
            {
                name: 'B·∫ßu',
                emoji: 'üéÉ'
            },
            {
                name: 'G√†',
                emoji: 'üêî'
            },
            {
                name: 'H∆∞∆°u',
                emoji: 'ü¶å'
            }
        ];

        const embed = new EmbedBuilder()
            .setTitle('B·∫ßu cua')
            .setColor('Blue')
            .setDescription(`B·∫°n c√≥ th·ªÉ ƒë·∫∑t c∆∞·ª£c v·ªõi 1 trong 6 l·ª±a ch·ªçn sau: th·∫£ reaction ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c!`)
            .addFields(
                {
                    name: 'L·ª±a ch·ªçn',
                    value: baucualist.map(item => `${item.emoji} ${item.name}`).join(', '),
                    inline: true
                },
            )
            .setThumbnail('https://i.ibb.co/PzpqhNg/464364317-1044910207314456-4180777111429000799-n.jpg')
            .setFooter({ text: `Th·ªùi gian ƒë·∫∑t c∆∞·ª£c: ${TIME_BET / 1000}s` })

        await interaction.reply({ embeds: [embed] });
        const reply = await interaction.fetchReply();
        
        // react with emoji
        for (const item of baucualist) {
            await reply.react(item.emoji);
        }
        
        const filter = (reaction, user) => {
            return baucualist.some(item => item.emoji === reaction.emoji.name) && user.id === interaction.user.id;
        };

        const collector = reply.createReactionCollector({ filter, time: TIME_BET });
        const userBets = new Map(); // Track user's bets
        const result = baucualist.sort(() => Math.random() - 0.5).slice(0, 3);

        collector.on('collect', async (reaction) => {
            const selectedEmoji = reaction.emoji.toString();
            const matchingItem = baucualist.find(item => item.emoji === selectedEmoji);
            if (matchingItem) {
                if (!userBets.has(selectedEmoji)) {
                    if (user.balance >= amount) {
                        userBets.set(selectedEmoji, true);
                        user.balance -= amount;
                        await user.save();
                    } else {
                        await interaction.followUp(`B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c! s·ªë ti·ªÅn c√≤n l·∫°i: ${formatNumber(user.balance)}\n V√† ch·ªâ c√≥ th·ªÉ ƒë·∫∑t c∆∞·ª£c v·ªõi ${userBets.size} l·ª±a ch·ªçn l√† ${Array.from(userBets.keys()).join(' ')}!`);
                    }
                }
            }
        });

        collector.on('end', async () => {
            const resultString = result.map(item => `${item.name} ${item.emoji}`).join(', ');

            if (userBets.size === 0) {
                const embed2 = new EmbedBuilder()
                    .setTitle('üé≤ K·∫øt qu·∫£ B·∫ßu Cua')
                    .setDescription(`ƒê√£ h·∫øt th·ªùi gian ƒë·∫∑t c∆∞·ª£c! K·∫øt qu·∫£: \n ${resultString}`)
                    .setColor('Red')
                    .setThumbnail('https://i.ibb.co/PzpqhNg/464364317-1044910207314456-4180777111429000799-n.jpg')
                    .setTimestamp()
                    .setFooter({ text: 'Ch√∫c b·∫°n may m·∫Øn l·∫ßn sau!' });
                await interaction.followUp({ embeds: [embed2] });
                return;
            }

            let totalWinnings = 0;
            let betResults = [];

            for (const [betEmoji] of userBets) {
                const matchingResult = result.find(item => item.emoji === betEmoji);
                if (matchingResult) {
                    // Th·∫Øng th√¨ nh·∫≠n l·∫°i ti·ªÅn c∆∞·ª£c + ti·ªÅn th∆∞·ªüng
                    totalWinnings += amount * 2;
                    betResults.push(`Th·∫Øng ${formatNumber(amount)} v·ªõi ${matchingResult.name} ${matchingResult.emoji}`);
                } else {
                    // Thua th√¨ m·∫•t ti·ªÅn c∆∞·ª£c
                    totalWinnings -= amount;
                    const matchingBet = baucualist.find(item => item.emoji === betEmoji);
                    betResults.push(`Thua ${formatNumber(amount)} v·ªõi ${matchingBet.name} ${matchingBet.emoji}`);
                }
            }

            await User.updateOne(
                { discordId: interaction.user.id },
                { $inc: { balance: totalWinnings } }
            );

            const betSummary = betResults.join('\n');
            const embed2 = new EmbedBuilder()
                .setTitle('üé≤ K·∫øt qu·∫£ B·∫ßu Cua')
                .setDescription(`**${interaction.user.username}** ƒë√£ tham gia tr√≤ ch∆°i B·∫ßu Cua`)
                .setColor(totalWinnings > 0 ? '#00ff00' : '#ff0000')
                .addFields(
                    { name: 'üéØ K·∫øt qu·∫£ x√∫c x·∫Øc', value: resultString, inline: false },
                    { name: 'üé´ L·ª±a ch·ªçn c·ªßa b·∫°n', value: Array.from(userBets.keys()).join(' '), inline: true },
                    { name: 'üí∞ Ti·ªÅn c∆∞·ª£c', value: `${formatNumber(amount)}`, inline: true },
                    { name: 'üèÜ K·∫øt qu·∫£', value: betSummary, inline: false },
                    { name: 'üíµ T·ªïng ti·ªÅn th∆∞·ªüng', value: `${totalWinnings >= 0 ? '+' : ''}${formatNumber(totalWinnings)}`, inline: true },
                    { name: 'üíµ S·ªë ti·ªÅn c√≤n l·∫°i', value: `${formatNumber(user.balance)}`, inline: true }
                )
                .setThumbnail('https://i.ibb.co/PzpqhNg/464364317-1044910207314456-4180777111429000799-n.jpg')
                .setTimestamp()
                .setFooter({ text: 'Ch√∫c b·∫°n may m·∫Øn l·∫ßn sau!' });
            await interaction.editReply({ embeds: [embed2] });
        });
    }

}