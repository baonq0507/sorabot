const { joinVoiceChannel, createAudioPlayer, createAudioResource } = require('@discordjs/voice');
const { SlashCommandBuilder, EmbedBuilder } = require("discord.js");
const { PREFIX, NHACCOMMAND, THUMBNAIL } = process.env;
const ytdl = require("@distube/ytdl-core");
const ytSearch = require('yt-search');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('play')
        .setDescription("Ph√°t nh·∫°c")
        .addStringOption(option => 
            option.setName('name')
            .setDescription('Link nh·∫°c ho·∫∑c t√™n b√†i h√°t')
            .setRequired(true)
        ),
    async execute(interaction) {
        const query = interaction.options.getString('name');
        let url = query;
        
        // If not a URL, treat as search query
        if (!query.startsWith('http://') && !query.startsWith('https://')) {
            try {
                const searchResults = await ytSearch(query);
                if (!searchResults || !searchResults.videos.length) {
                    const embed = new EmbedBuilder()
                        .setTitle('‚ùå Kh√¥ng t√¨m th·∫•y')
                        .setDescription('Kh√¥ng t√¨m th·∫•y b√†i h√°t b·∫°n y√™u c·∫ßu!')
                        .setThumbnail(THUMBNAIL)
                        .setColor('#FF0000')
                        .setTimestamp();
                    return interaction.reply({ embeds: [embed] });
                }
                url = searchResults.videos[0].url;
            } catch (error) {
                console.error(error);
                const embed = new EmbedBuilder()
                    .setTitle('‚ùå L·ªói')
                    .setDescription('C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm b√†i h√°t!')
                    .setThumbnail(THUMBNAIL)
                    .setColor('#FF0000')
                    .setTimestamp();
                return interaction.reply({ embeds: [embed] });
            }
        }

        const voiceChannel = interaction.member.voice.channel;
        if (!voiceChannel) {
            const embed = new EmbedBuilder()
                .setTitle('‚ùå L·ªói')
                .setDescription('B·∫°n ph·∫£i tham gia m·ªôt k√™nh tho·∫°i ƒë·ªÉ ph√°t nh·∫°c!')
                .setThumbnail(THUMBNAIL)
                .setColor('#FF0000')
                .setTimestamp();
            return interaction.reply({ embeds: [embed] });
        }

        try {
            if (!ytdl.validateURL(url)) {
                const embed = new EmbedBuilder()
                    .setTitle('‚ùå L·ªói')
                    .setDescription('Link YouTube kh√¥ng h·ª£p l·ªá!')
                    .setColor('#FF0000')
                    .setThumbnail(THUMBNAIL)
                    .setTimestamp();
                return interaction.reply({ embeds: [embed] });
            }

            const connection = joinVoiceChannel({
                channelId: voiceChannel.id,
                guildId: interaction.guild.id,
                adapterCreator: interaction.guild.voiceAdapterCreator,
            });

            const stream = ytdl(url, {
                filter: 'audioonly',
                quality: 'highestaudio',
                dlChunkSize: 0,
                requestOptions: {
                    headers: {
                        'User-Agent': 'Mozilla/5.0',
                    },
                },
                highWaterMark: 1 << 25,
                dlChunkSize: 0,
            });
            const resource = createAudioResource(stream);
            const player = createAudioPlayer();

            connection.subscribe(player);
            player.play(resource);

            const embed = new EmbedBuilder()
                .setTitle('üéµ ƒêang ph√°t nh·∫°c')
                .setDescription('ƒêang ph√°t nh·∫°c c·ªßa b·∫°n, ch√∫c b·∫°n nghe nh·∫°c vui v·∫ª! üé∂')
                .setColor('#00FF00')
                .setThumbnail(THUMBNAIL)
                .setTimestamp();
            await interaction.reply({ embeds: [embed] });

            player.on('error', (error) => {
                console.error(`Playback error: ${error}`);
                const embed = new EmbedBuilder()
                    .setTitle('‚ùå L·ªói ph√°t nh·∫°c')
                    .setDescription('C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ph√°t nh·∫°c!')
                    .setColor('#FF0000')
                    .setThumbnail(THUMBNAIL)
                    .setTimestamp();
                return interaction.editReply({ embeds: [embed] });
            });
        } catch (error) {
            console.error(`Unexpected error: ${error.message}`);
            const embed = new EmbedBuilder()
                .setTitle('‚ùå L·ªói')
                .setDescription('Kh√¥ng th·ªÉ ph√°t nh·∫°c n√†y!')
                .setColor('#FF0000')
                .setThumbnail(THUMBNAIL)
                .setTimestamp();
            return interaction.reply({ embeds: [embed] });
        }
    },

}
