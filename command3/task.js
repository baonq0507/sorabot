const { EmbedBuilder, SlashCommandBuilder } = require('discord.js');
const { TASKCOMMAND, PREFIX, JOBCOMMAND } = process.env;
const { formatNumber } = require('../common');
const User = require('../models/user');
module.exports = {
    data: new SlashCommandBuilder()
        .setName('task')
        .setDescription('L√†m vi·ªác'),
    async execute(interaction) {
        let user = await User.findOne({ discordId: interaction.user.id });

        if (!user) {
            user = await User.create({ discordId: interaction.user.id, displayName: interaction.user.displayName });
        }
        if (user.displayName === '') {
            user.displayName = interaction.user.displayName;
            await user.save();
        }

        const job = user.job;
        if (!job || job === 'none') {
            await interaction.reply(`B·∫°n ch∆∞a c√≥ c√¥ng vi·ªác n√†o! H√£y nh·∫≠n c√¥ng vi·ªác b·∫±ng l·ªánh: \`${PREFIX} ${JOBCOMMAND}\``);
            return;
        }

        const jobList = require('../job/job');
        const jobInfo = jobList.job.find(j => j.name === job);

        if (!jobInfo) {
            await interaction.reply(`C√¥ng vi·ªác kh√¥ng t·ªìn t·∫°i!`);
            return;
        }
        if (user.lastTaskTime && new Date() - user.lastTaskTime < 30 * 60 * 1000) {
            const timeLeft = Math.ceil((30 * 60 * 1000 - (new Date() - user.lastTaskTime)) / (60 * 1000));
            let timeUnit = timeLeft < 1 ? 'gi√¢y' : 'ph√∫t';
            let timeValue = timeLeft < 1 ? Math.ceil(timeLeft * 60) : timeLeft;
            const embed = new EmbedBuilder()
                .setTitle('‚è∞ Th·ªùi gian ngh·ªâ ng∆°i')
                .setDescription(`B·∫°n c·∫ßn ch·ªù ${timeValue} ${timeUnit} ƒë·ªÉ l√†m vi·ªác ti·∫øp! üïí`)
                .setColor('Red')
                .addFields(
                    { name: 'üí™ L·ªùi khuy√™n', value: 'H√£y c·ªë g·∫Øng ngh·ªâ ng∆°i, gi·ªØ s·ª©c kh·ªèe!' }
                )
                .setTimestamp();
            await interaction.reply({ embeds: [embed] });
            return;
        }
        const task = jobInfo.task;
        const taskRandom = task[Math.floor(Math.random() * task.length)];

        user.lastTaskTime = new Date();
        if (user.balance < 0) {
            user.balance = 0;
        }
        user.balance += taskRandom.reward;

        await user.save();
        const embed = new EmbedBuilder()
            .setTitle('üíº B√°o c√°o c√¥ng vi·ªác')
            .setDescription(`${interaction.user.username} ƒë√£ ho√†n th√†nh c√¥ng vi·ªác!`)
            .setColor('Green')
            .addFields(
                { name: 'üìã Nhi·ªám v·ª•', value: taskRandom.task.name },
                { name: 'üí∞ Ti·ªÅn l∆∞∆°ng', value: formatNumber(taskRandom.reward) },
                { name: 'üí¨ Ph·∫£n h·ªìi', value: taskRandom.task.descriptions[Math.floor(Math.random() * taskRandom.task.descriptions.length)] }
            )
            .setThumbnail(THUMBNAIL)
            .setTimestamp();
        await interaction.reply({ embeds: [embed] });
    }
}